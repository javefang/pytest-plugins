test-tmpl: &test-tmpl
  command: |
    . ../venv/bin/activate
    export DEBUG=1
    cat *.egg-info/top_level.txt  | xargs -Ipysrc coverage run -p --source=pysrc setup.py test -sv -ra || touch ../FAILED-$(basename $PWD)

job-tmpl: &job-tmpl
  machine: true

  working_directory: ~/src

  steps:
    - run: env
    - checkout
    - run:
        name: Install Python 
        command: | 
          set -x 

          if [[ $PYTHON == "python2.7" ]]; then 
            sudo bash -c "yes | add-apt-repository ppa:deadsnakes/ppa && apt-get update && apt-get install -y python2.7 python2.7-dev"
          fi

          if [[ $PYTHON == "python3.4" ]]; then 
            sudo bash -c "yes | add-apt-repository ppa:deadsnakes/ppa && apt-get update && apt-get install -y python3.4 python3.4-dev"
          fi

          if [[ $PYTHON == "python3.5" ]]; then 
            sudo bash -c "yes | add-apt-repository ppa:deadsnakes/ppa && apt-get update && apt-get install -y python3.5 python3.5-dev"
          fi

          if [[ $PYTHON == "python3.6" ]]; then 
            sudo bash -c "yes | add-apt-repository ppa:jonathonf/python-3.6 && apt-get update && apt-get install -y python3.6 python3.6-dev"
          fi

          rm -rf /opt/circleci/.pyenv

    - run: 
        name: Install Pip and Virtualenv
        command: | 
          curl --silent --show-error --retry 5 https://bootstrap.pypa.io/get-pip.py | sudo $PYTHON
          sudo $PYTHON -m pip install --upgrade pip
          sudo $PYTHON -m pip install --upgrade virtualenv
 
    - run: 
        name: Create venv and install extras
        command: | 
          $PYTHON -m virtualenv venv
          . venv/bin/activate
          pip install       \
              pypandoc       \
              wheel          \
              coverage       \
              python-jenkins \
              redis          \
              pymongo        \
              psycopg2       \
              boto3          \
              rethinkdb

    - run: 
        name: Update Apt-Sources
        command: | 
          source /etc/lsb-release && echo "deb http://download.rethinkdb.com/apt $DISTRIB_CODENAME main" | sudo tee /etc/apt/sources.list.d/rethinkdb.list
          wget -qO- https://download.rethinkdb.com/apt/pubkey.gpg | sudo apt-key add -
          source /etc/lsb-release && echo "deb http://pkg.jenkins-ci.org/debian binary/" | sudo tee /etc/apt/sources.list.d/jenkins.list
          wget -qO- https://pkg.jenkins.io/debian/jenkins.io.key | sudo apt-key add -
          sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 0C49F3730359A14518585931BC711F9BA15703C6
          echo "deb [ arch=amd64 ] http://repo.mongodb.org/apt/ubuntu trusty/mongodb-org/3.4 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-3.4.list
          sudo apt-get update
    - run: 
        name: Install System Dependencies
        command: | 
          sudo apt-get install subversion graphviz
    - run: 
        name: Install Postgresql
        command: | 
          sudo apt-get install postgresql postgresql-contrib libpq-dev
          sudo service postgresql stop; sudo update-rc.d postgresql disable;
    - run: 
        name: Install Redis
        command: | 
          sudo apt-get install redis-server pandoc subversion graphviz
    - run: 
        name: Install Rethinkdb
        command: | 
          sudo apt-get install rethinkdb
          sudo service rethinkdb stop; sudo update-rc.d rethinkdb disable;
    - run: 
        name: Install Jenkins
        command: | 
          sudo apt-get install jenkins
          sudo service jenkins stop; sudo update-rc.d jenkins disable;
    - run: 
        name: Install Mongodb
        command: | 
          sudo apt-get install mongodb-org mongodb-org-server
    - run: 
        name: Install Apache
        command: | 
          sudo apt-get install apache2
          sudo service apache2 stop; sudo update-rc.d apache2 disable;
    - run: 
        name: Install Minio
        command: | 
          wget https://dl.minio.io/server/minio/release/linux-amd64/minio -O /tmp/minio
          sudo mv /tmp/minio /usr/local/bin/minio
          sudo chmod a+x /usr/local/bin/minio
    - run: 
        name: Install Chrome Headless
        command: | 
          wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb -O /tmp/google-chrome-stable_current_amd64.deb
          dpkg -i --force-depends /tmp/google-chrome-stable_current_amd64.deb
          apt-get install -f -y
          apt-get install -y unzip
          wget https://chromedriver.storage.googleapis.com/2.43/chromedriver_linux64.zip -O /tmp/chromedriver_linux64.zip
          unzip /tmp/chromedriver_linux64.zip
          mv chromedriver /usr/local/bin/
          chmod +x /usr/local/bin/chromedriver

    - run: 
        name: Build and install dists
        command: |
          . venv/bin/activate
          ./foreach.sh 'cp ../VERSION ../CHANGES.md ../common_setup.py ../MANIFEST.in ../LICENSE .'
          ./foreach.sh 'pip install -e .[tests]'
    - run: 
        name: Run Tests - pytest-fixture-config 
        working_directory: ~/src/pytest-fixture-config
        <<: *test-tmpl
    - run: 
        name: Run Tests - pytest-shutil
        working_directory: ~/src/pytest-shutil
        <<: *test-tmpl
    - run: 
        name: Run Tests - pytest-server-fixtures
        working_directory: ~/src/pytest-server-fixtures
        <<: *test-tmpl
    - run: 
        name: Run Tests - pytest-pyramid-server
        working_directory: ~/src/pytest-pyramid-server
        <<: *test-tmpl
    - run: 
        name: Run Tests - pytest-devpi-server
        working_directory: ~/src/pytest-devpi-server
        <<: *test-tmpl
    - run: 
        name: Run Tests - pytest-listener
        working_directory: ~/src/pytest-listener
        <<: *test-tmpl
    - run: 
        name: Run Tests - pytest-svn
        working_directory: ~/src/pytest-svn
        <<: *test-tmpl
    - run: 
        name: Run Tests - pytest-git
        working_directory: ~/src/pytest-git
        <<: *test-tmpl
    - run: 
        name: Run Tests - pytest-virtualenv
        working_directory: ~/src/pytest-virtualenv
        <<: *test-tmpl
    - run: 
        name: Run Tests - pytest-webdriver
        working_directory: ~/src/pytest-webdriver
        <<: *test-tmpl
    - run: 
        name: Run Tests - pytest-profiling
        working_directory: ~/src/pytest-profiling
        <<: *test-tmpl
    - run: 
        name: Run Tests - pytest-verbose-parametrize
        working_directory: ~/src/pytest-verbose-parametrize
        <<: *test-tmpl
    - run: 
        name: Archive Junit and Coverage
        command: |
          mkdir junit
          ./foreach.sh 'cp junit.xml ../junit/junit-$PKG.xml'
          ./foreach.sh 'cp .coverage.* ..'
          . venv/bin/activate
          coverage combine
          coverage report
          pip install python-coveralls
          coveralls --ignore-errors
          
    - store_test_results:
        path: junit
    - run: 
        name: Explode if tests have failed
        command: compgen -G FAILED-* && exit 1 || true

version: 2
jobs:
  py27: 
    <<: *job-tmpl
    environment:
      PYTHON: "python2.7"

  py34: 
    <<: *job-tmpl
    environment:
      PYTHON: "python3.4"

  py35: 
    <<: *job-tmpl
    environment:
      PYTHON: "python3.5"

  py36: 
    <<: *job-tmpl
    environment:
      PYTHON: "python3.6"

  coveralls:
    docker:
      - image: buildpack-deps:trusty
    steps:
      - run: 
          name: Complete Coveralls
          command: curl -k https://coveralls.io/webhook?repo_token=$COVERALLS_REPO_TOKEN -d "payload[build_num]=$BUILD_NUMBER&payload[status]=done"
  
workflows:
  version: 2
  pytest-plugins:
    jobs:
      - py27
      - py34
      - py35
      - py36
      - coveralls:
          requires:
            - py27
            - py34
            - py35
            - py36
